#!/usr/bin/perl -w
#
# Copyright 2009 Geoff Levand
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# wget --recursive --page-requisites --convert-links --no-parent \
#  --accept 'diagram.php*,jpg' \
# --exclude-directories='/moto_photos,/images,/product_photos' \
#  'http://www.webparts.com/mgfg.php?series=K66&model=R100PD'
#

package main;

use strict;
use warnings;
use Getopt::Std;

my $app_name = q(fiche-maker-batch);
my $package_name = q(fiche-maker);
my $app_version = q(1.0);

sub VERSION_MESSAGE
{
	print($app_name . q{ (} . $package_name . q{) } . $app_version
		. qq(\n));
}

$Getopt::Std::STANDARD_HELP_VERSION = 1;

sub HELP_MESSAGE
{
	print(
  qq(SYNOPSIS\n)
. qq(     ) . $app_name . qq( [OPTIONS]\n)
. qq(DESCRIPTION\n)
. qq(     Runs fiche-maker on the list of files on stdin and then runs\n)
. qq(     fiche-indexer to create a fiche index for the generated pages.\n)
. qq(OPTIONS\n)
. qq(     -h, --help\n)
. qq(          Print a help message.\n)
. qq(     -n, --no-index\n)
. qq(          Do not run fiche-indexer.\n)
. qq(     -o OUT, --output-dir=OUT\n)
. qq(          Put generated files in directory OUT.  The default is to\n)
. qq(          put the generated file in the same directory as the source\n)
. qq(          file.\n)
. qq(\n)
. qq(          Note that the use of the --output-dir option will typically\n)
. qq(          require the user to copy the fiche image files to the\n)
. qq(          directory OUT.\n)
. qq(     -v, --verbose\n)
. qq(          Verbose program execution.\n)
. qq(     -V, --version\n)
. qq(          Display the program version number.\n)
. qq(EXAMPLES\n)
. qq(     find in -name \'diagram.php*\' | ). $app_name . qq( -o out\n)
. qq(     mkdir out/parts\n)
. qq(     ln in/parts/* out/parts/\n)
	);
}

sub opts_parse (@)
{
	my ($opts) = @_;
	our ($opt_h, $opt_n, $opt_o, $opt_v, $opt_V);

	getopts('hno:vV');

	if (defined($opt_h)) {
		VERSION_MESSAGE();
		HELP_MESSAGE();
		exit 0;
	}

	$opts->{no_index} = $opt_n;
	$opts->{out} = $opt_o;
	$opts->{verbose} = defined($opt_v);

	if (defined($opt_V)) {
		VERSION_MESSAGE();
		exit 0;
	}
}

sub dir_make (@)
{
	my ($dir) = @_;

	$dir =~ s/'/'\\''/g;

	my $cmd = q(mkdir -p ') . $dir . q(');

	#print STDOUT ($app_name . qq(: cmd: @) . $cmd . qq(@\n))

	my $result = system($cmd);

	if ($result) {
		print STDERR ($app_name . qq(: error: @) . $cmd . qq(@ failed.\n));
		exit 1;
	}
}

# start of program

my %opts;
opts_parse(\%opts);

my @files;
my @index_list;

while(<>) {
	chomp($_);

	if (m{(.*)/[^/]+btnr=([0-9]{2}_[0-9]{4})[^[0-9]}i) {
		my %file;

		$file{orig} = $_;
		$file{new} = (defined($opts{out}) ? $opts{out} : $1)
			. q(/) . $2 . qq(.html);

		push(@files, \%file);
		push(@index_list, $file{new}) if (!defined($opts{no_index}));
	}
}

print STDERR ($app_name . qq(: processing ) . @files . qq( files\n));

dir_make($opts{out}) if (defined($opts{out}));

FILE: foreach my $file (@files) {
	# Prepare for shell

	my $orig = $file->{orig};
	$orig =~ s/'/'\\''/g;
	$orig = q(') . $orig . q(');

	my $new = $file->{new};
	$new =~ s/'/'\\''/g;
	$new = q(') . $new . q(');

	my $cmd = q(cat ) . $orig . q( | ./fiche-maker )
		. ($opts{verbose} ? q(-v > ) : q(> )) . $new;

	print STDOUT ($app_name . qq(: ) . $cmd . qq(\n))
		if ($opts{verbose});

	my $result = system($cmd);

	if ($result) {
		print STDERR ($app_name . qq(: error: @) . $cmd . qq(@ failed.\n));
		exit 1;
	}
}

exit 0 if (defined($opts{no_index}));

my $out = defined($opts{out}) ? $opts{out} : qq(./);

$" = qq(\n); # LIST_SEPARATOR

my $cmd = q(echo ") . qq(@index_list) . q(" | ./fiche-indexer)
	. ($opts{verbose} ? q( -v ) : q( )) . q(-o ) . $out;

print STDOUT ($app_name . qq(: ) . $cmd . qq(\n))
		if ($opts{verbose});

my $result = system($cmd);

if ($result) {
	print STDERR ($app_name . qq(: error: fiche-indexer failed.\n));
	exit 1;
}

exit 0;

__END__
